create stream analyzed_text (identifier string, headline string, articleBody string, dateCreated string, dateModified string, datePublished string, textRating double) with (kafka_topic='analyzed_text', value_format='JSON');
create stream analyzed_auth_org (identifier string, author array<string>, publisher array<string>, publisherRating double, authorRating double) with (kafka_topic='analyzed_auth_org', value_format='JSON');
create stream analyzed_media (identifier string, contains array<string>, mediaRating double) with (kafka_topic='analyzed_media', value_format='JSON');
create stream analyzed_ner_topic (identifier string, about array<string>, mentions array<string>) with (kafka_topic='analyzed_ner_topic', value_format='JSON');

create stream join_tao with (partitions=1) as select t.identifier as identifier, t.headline, t.articleBody, t.dateCreated, t.dateModified, t.datePublished, t.textRating, ao.author, ao.publisher, ao.publisherRating, ao.authorRating from analyzed_text t inner join analyzed_auth_org ao within 48 hours on t.identifier = ao.identifier;
create stream join_taont with (partitions=1) as select t.identifier as identifier, t.headline, t.articleBody, t.dateCreated, t.dateModified, t.datePublished, t.textRating, t.author, t.publisher, t.publisherRating, t.authorRating, nt.about, nt.mentions from join_tao t inner join analyzed_ner_topic nt within 48 hours on t.identifier = nt.identifier;
create stream analyzed_article with (partitions=1) as select t.identifier as identifier, t.headline, t.articleBody, t.dateCreated, t.dateModified, t.datePublished, t.textRating, t.author, t.publisher, t.publisherRating, t.authorRating, t.about, t.mentions, m.contains, m.mediaRating from join_taont t inner join analyzed_media m within 48 hours on t.identifier = m.identifier;
